import { promises as fs } from 'node:fs';
import { getMimeType } from '../utils/mime-type.js';
import { ensureSize } from '../utils/svg.js';
import * as tmp from 'tmp-promise';
import { ensurePackage } from '../utils/package-helper.js';
const encoder = new TextEncoder();
const decoder = new TextDecoder();
export const toFormat = function (svg, format, exif) {
    return {
        toDataUri: async () => {
            return toDataUri(await toArrayBuffer(svg, format, exif), format);
        },
        toFile: async (name) => {
            return toFile(await toArrayBuffer(svg, format, exif), name);
        },
        toArrayBuffer: async () => {
            return toArrayBuffer(svg, format, exif);
        },
    };
};
async function toDataUri(arrayBuffer, format) {
    if (format === 'svg') {
        return `data:${getMimeType(format)};utf8,${encodeURIComponent(decoder.decode(arrayBuffer))}`;
    }
    else {
        const buffer = Buffer.from(arrayBuffer);
        return `data:${getMimeType(format)};base64,${buffer.toString('base64')}`;
    }
}
async function toFile(arrayBuffer, name) {
    return fs.writeFile(name, Buffer.from(arrayBuffer));
}
async function toArrayBuffer(rawSvg, format, exif) {
    if (format === 'svg') {
        if (exif) {
            console.warn('Exif is ignored when converting to svg.');
        }
        return encoder.encode(rawSvg);
    }
    await ensurePackage('@resvg/resvg-js', '2.0.0');
    const { renderAsync } = await import('@resvg/resvg-js');
    const interRegular = new URL('../../fonts/inter/inter-regular.otf', import.meta.url);
    const interBold = new URL('../../fonts/inter/inter-bold.otf', import.meta.url);
    let { svg } = ensureSize(rawSvg);
    let buffer = (await renderAsync(svg, {
        font: {
            loadSystemFonts: false,
            defaultFontFamily: 'Inter',
            fontFiles: [interRegular.pathname, interBold.pathname],
        },
    })).asPng();
    if (format === 'jpeg') {
        await ensurePackage('sharp', '0.30.0');
        const sharp = (await import('sharp')).default;
        buffer = await sharp(buffer)
            .flatten({ background: '#ffffff' })
            .toFormat(format)
            .toBuffer();
    }
    if (exif) {
        await ensurePackage('exiftool-vendored', '16.3.0');
        const exiftool = (await import('exiftool-vendored')).exiftool;
        await tmp.withFile(async ({ path }) => {
            await fs.writeFile(path, buffer);
            await exiftool.write(path, exif);
            buffer = await fs.readFile(path);
        });
    }
    return buffer.buffer;
}
